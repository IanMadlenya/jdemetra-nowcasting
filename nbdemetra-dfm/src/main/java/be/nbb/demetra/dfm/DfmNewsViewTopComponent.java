/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.nbb.demetra.dfm;

import ec.nbdemetra.ui.NbComponents;
import ec.nbdemetra.ws.WorkspaceItem;
import ec.tss.dfm.VersionedDfmDocument;
import ec.tstoolkit.dfm.DfmNews;
import ec.ui.view.tsprocessing.DefaultProcessingViewer;
import static ec.ui.view.tsprocessing.DefaultProcessingViewer.Type.NONE;
import static ec.util.various.swing.FontAwesome.FA_COGS;
import static ec.util.various.swing.FontAwesome.FA_EXCLAMATION_TRIANGLE;
import static ec.util.various.swing.FontAwesome.FA_INFO_CIRCLE;
import static ec.util.various.swing.FontAwesome.FA_SPINNER;
import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.nbb.demetra.dfm//DfmNewsView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DfmNewstViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_DfmNewsViewAction=DfmNewsView",
    "CTL_DfmONewsViewTopComponent=DfmNewsView Window",
    "HINT_DfmNewsViewTopComponent=This is a DfmNewsView window"
})
public final class DfmNewsViewTopComponent extends AbstractDfmDocumentTopComponent {

    private final DfmOutputViewTopComponent.XLabel label;
    private final DefaultProcessingViewer<VersionedDfmDocument> processingViewer;

    public DfmNewsViewTopComponent() {
        this(null, new DfmController());
    }

    DfmNewsViewTopComponent(WorkspaceItem<VersionedDfmDocument> document, DfmController controller) {
        super(document, controller);
        initComponents();
 
        this.label = new DfmOutputViewTopComponent.XLabel();
        this.processingViewer = new DefaultProcessingViewer<VersionedDfmDocument>(NONE) {
        };
        processingViewer.setHeaderVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    protected void onDfmStateChange() {
        updateChart();
        super.onDfmStateChange();
    }

    @Override
    public JComponent getToolbarRepresentation() {
        JToolBar toolbar = NbComponents.newInnerToolbar();
        toolbar.addSeparator();

//        JButton copy = toolbar.add(CopyCommand.INSTANCE.toAction(this));
//        copy.setIcon(DemetraUiIcon.EDIT_COPY_16);
//        copy.setDisabledIcon(ImageUtilities.createDisabledIcon(copy.getIcon()));
        return toolbar;
    }

     private void switchTo(Component c) {
        removeAll();
        add(c, BorderLayout.CENTER);
    }

    private void updateChart() {
        switch (controller.getDfmState()) {
            case DONE:
                processingViewer.setDocument(getDocument().getElement());
                switchTo(processingViewer);
                break;
            default:
                switchTo(label.with(FA_EXCLAMATION_TRIANGLE, "No news analysis"));
                break;
        }
    }

}
