/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.nbb.demetra.dfm;

import ec.tstoolkit.dfm.DfmModelSpec;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.nbb.demetra.dfm//DfmModelSpecView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DfmModelSpecViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "be.nbb.demetra.dfm.DfmModelSpecViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DfmModelSpecViewAction",
        preferredID = "DfmModelSpecViewTopComponent"
)
@Messages({
    "CTL_DfmModelSpecViewAction=DfmModelSpecView",
    "CTL_DfmModelSpecViewTopComponent=DfmModelSpecView Window",
    "HINT_DfmModelSpecViewTopComponent=This is a DfmModelSpecView window"
})
public final class DfmModelSpecViewTopComponent extends TopComponent {

    public static final String MODEL_PROPERTY = "model";
    private DfmModelSpec model;

    public DfmModelSpecViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_DfmModelSpecViewTopComponent());
        setToolTipText(Bundle.HINT_DfmModelSpecViewTopComponent());

        addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                switch (evt.getPropertyName()) {
                    case MODEL_PROPERTY:
                        onModelChange();
                        break;
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dfmModelSpecView1 = new be.nbb.demetra.dfm.DfmModelSpecView();

        setLayout(new java.awt.BorderLayout());
        add(dfmModelSpecView1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private be.nbb.demetra.dfm.DfmModelSpecView dfmModelSpecView1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        setModel(DfmModelSpecDemo.get());
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    private void onModelChange() {
        dfmModelSpecView1.setModel(model);
    }

    public DfmModelSpec getModel() {
        return model;
    }

    public void setModel(DfmModelSpec model) {
        DfmModelSpec old = this.model;
        this.model = model != null ? model : new DfmModelSpec();
        firePropertyChange(MODEL_PROPERTY, old, this.model);
    }

}
