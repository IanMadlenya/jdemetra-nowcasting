/*
 * Copyright 2014 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package be.nbb.demetra.dfm.output.simulation.utils;

import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.AbstractListModel;
import javax.swing.JPanel;

/**
 *
 * @author Mats Maggi
 */
public class FilterHorizonsPanel extends JPanel {

    SortedListModel model;
    SortedListModel model2;

    /**
     * Creates new form FilterHorizonsPanel
     */
    public FilterHorizonsPanel() {
        this(null, null);
    }

    public FilterHorizonsPanel(List<Integer> available, List<Integer> selected) {
        initComponents();

        model = available == null ? new SortedListModel() : new SortedListModel(available);
        model2 = selected == null ? new SortedListModel() : new SortedListModel(selected);

        availableList.setModel(model);
        selectedList.setModel(model2);
    }

    public SortedSet<Integer> getSelectedElements() {
        return model2.getElements();
    }

    public void setSelectedElements(List<Integer> elements) {
        model2 = new SortedListModel(elements);
        selectedList.setModel(model2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        addAllButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20));
        removeButton = new javax.swing.JButton();
        removeAllButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(300, 300));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setLayout(new java.awt.BorderLayout());

        availableList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        availableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availableListMouseClicked(evt);
            }
        });
        availableList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                availableListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(availableList);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Available horizons :");
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 0, 3, 0));
        jPanel2.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        add(jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(addButton, ">");
        addButton.setAlignmentX(0.5F);
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);

        org.openide.awt.Mnemonics.setLocalizedText(addAllButton, ">>");
        addAllButton.setAlignmentX(0.5F);
        addAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAllButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addAllButton);
        jPanel1.add(filler1);

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, "<");
        removeButton.setAlignmentX(0.5F);
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeButton);

        org.openide.awt.Mnemonics.setLocalizedText(removeAllButton, "<<");
        removeAllButton.setAlignmentX(0.5F);
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeAllButton);

        add(jPanel1);

        jPanel3.setLayout(new java.awt.BorderLayout());

        selectedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectedListMouseClicked(evt);
            }
        });
        selectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(selectedList);

        jPanel3.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Selected Horizons :");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 0, 3, 0));
        jPanel3.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        add(jPanel3);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (model.getSize() != 0) {
            availableList.getSelectedValuesList().stream().map((o) -> {
                model.removeElement((Integer) o);
                return o;
            }).forEach((o) -> {
                model2.addElement((Integer) o);
            });
        }
        selectedList.clearSelection();
        availableList.clearSelection();
    }//GEN-LAST:event_addButtonActionPerformed

    private void availableListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_availableListValueChanged
        addButton.setEnabled(!availableList.isSelectionEmpty());
    }//GEN-LAST:event_availableListValueChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (model2.getSize() != 0) {
            selectedList.getSelectedValuesList().stream().map((o) -> {
                model2.removeElement((Integer) o);
                return o;
            }).forEach((o) -> {
                model.addElement((Integer) o);
            });
        }
        selectedList.clearSelection();
        availableList.clearSelection();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAllButtonActionPerformed
        model2.addElements(model.getElements());
        model.clear();
        selectedList.clearSelection();
        availableList.clearSelection();
    }//GEN-LAST:event_addAllButtonActionPerformed

    private void removeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtonActionPerformed
        model.addElements(model2.getElements());
        model2.clear();
        selectedList.clearSelection();
        availableList.clearSelection();
    }//GEN-LAST:event_removeAllButtonActionPerformed

    private void selectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectedListValueChanged
        removeButton.setEnabled(!selectedList.isSelectionEmpty());
    }//GEN-LAST:event_selectedListValueChanged

    private void availableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availableListMouseClicked
        if (evt.getClickCount() == 2) {
            Object selected = availableList.getSelectedValue();
            if (selected != null) {
                model.removeElement((Integer) selected);
                model2.addElement((Integer) selected);
            }

            selectedList.clearSelection();
            availableList.clearSelection();
        }
    }//GEN-LAST:event_availableListMouseClicked

    private void selectedListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectedListMouseClicked
        if (evt.getClickCount() == 2) {
            Object selected = selectedList.getSelectedValue();
            if (selected != null) {
                model2.removeElement((Integer) selected);
                model.addElement((Integer) selected);
            }

            selectedList.clearSelection();
            availableList.clearSelection();
        }
    }//GEN-LAST:event_selectedListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAllButton;
    private javax.swing.JButton addButton;
    private javax.swing.JList availableList;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeAllButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JList selectedList;
    // End of variables declaration//GEN-END:variables

    class SortedListModel extends AbstractListModel {

        private final SortedSet<Integer> model;

        public SortedListModel() {
            model = new TreeSet();
        }

        public SortedListModel(List<Integer> elements) {
            model = new TreeSet<>(elements);
        }

        @Override
        public int getSize() {
            return model.size();
        }

        public boolean contains(Integer i) {
            return model.contains(i);
        }

        @Override
        public Object getElementAt(int index) {
            return model.toArray()[index];
        }

        public void addElement(Integer element) {
            if (model.add(element)) {
                fireContentsChanged(this, 0, getSize());
            }
        }

        public SortedSet<Integer> getElements() {
            return model;
        }

        public void addElements(SortedSet<Integer> elements) {
            elements.stream().forEach((i) -> {
                model.add(i);
            });
            fireContentsChanged(this, 0, getSize());
        }

        public void clear() {
            model.clear();
            fireContentsChanged(this, 0, getSize());
        }

        public boolean removeElement(Integer element) {
            boolean removed = model.remove(element);
            if (removed) {
                fireContentsChanged(this, 0, getSize());
            }
            return removed;
        }
    }
}
