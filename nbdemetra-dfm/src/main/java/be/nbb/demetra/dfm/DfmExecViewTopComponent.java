/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.nbb.demetra.dfm;

import ec.nbdemetra.ui.DemetraUiIcon;
import ec.nbdemetra.ui.properties.OpenIdePropertySheetBeanEditor;
import ec.nbdemetra.ws.WorkspaceFactory;
import ec.nbdemetra.ws.WorkspaceItem;
import ec.nbdemetra.ws.ui.WorkspaceTopComponent;
import ec.tss.Dfm.DfmDocument;
import ec.tss.Dfm.DfmProcessingFactory;
import ec.tstoolkit.algorithm.CompositeResults;
import ec.tstoolkit.algorithm.IProcessingHook;
import ec.tstoolkit.algorithm.IProcessingNode;
import ec.tstoolkit.dfm.DfmEstimationSpec;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import javax.swing.SwingWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewDescription;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.NotificationDisplayer;
import org.openide.util.ImageUtilities;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//be.nbb.demetra.dfm//DfmExecView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DfmExecViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "CTL_DfmExecViewAction=DfmExecView",
    "CTL_DfmExecViewTopComponent=DfmExecView Window",
    "HINT_DfmExecViewTopComponent=This is a DfmExecView window"
})
public final class DfmExecViewTopComponent extends WorkspaceTopComponent<DfmDocument> implements MultiViewElement, MultiViewDescription {

    private static DfmDocumentManager manager() {
        return WorkspaceFactory.getInstance().getManager(DfmDocumentManager.class);
    }

    public DfmExecViewTopComponent() {
        this(manager().create(WorkspaceFactory.getInstance().getActiveWorkspace()));
    }

    public DfmExecViewTopComponent(WorkspaceItem<DfmDocument> document) {
        super(document);
        initComponents();
        setName(Bundle.CTL_DfmExecViewTopComponent());
        setToolTipText(Bundle.HINT_DfmExecViewTopComponent());
        jEditorPane1.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(jEditorPane1);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    //<editor-fold defaultstate="collapsed" desc="MultiViewElement">
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        JToolBar toolBar = new JToolBar();
        toolBar.addSeparator();
        toolBar.add(Box.createRigidArea(new Dimension(5, 0)));

        JButton runButton = toolBar.add(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                run();
            }
        });
        runButton.setIcon(DemetraUiIcon.COMPILE_16);
        runButton.setDisabledIcon(ImageUtilities.createDisabledIcon(runButton.getIcon()));

        JButton edit = toolBar.add(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editEstimationSpec();
            }
        });
        edit.setText("Specification");

        return toolBar;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    @Override
    public void componentActivated() {
        super.componentActivated();
    }

    @Override
    public void componentDeactivated() {
        super.componentDeactivated();
    }

    @Override
    public void componentHidden() {
        super.componentHidden();
    }

    @Override
    public void componentShowing() {
        super.componentShowing();
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="MultiViewDescription">
    @Override
    public MultiViewElement createElement() {
        return this;
    }

    @Override
    public String preferredID() {
        return super.preferredID();
    }
    //</editor-fold>

    @Override
    protected String getContextPath() {
        return DfmDocumentManager.CONTEXTPATH;
    }

    private void run() {
        new SwingWorker<CompositeResults, Void>() {
            @Override
            protected CompositeResults doInBackground() throws Exception {
                return runInBackground();
            }

            @Override
            protected void done() {
                NotificationDisplayer.getDefault().notify("Long running process", DemetraUiIcon.COMPILE_16, "DONE!", null);
            }
        }.run();
    }

    private CompositeResults runInBackground() {
        IProcessingHook<IProcessingNode, DfmProcessingFactory.EstimationInfo> hook = new IProcessingHook<IProcessingNode, DfmProcessingFactory.EstimationInfo>() {

            @Override
            public void process(IProcessingHook.HookInformation<IProcessingNode, DfmProcessingFactory.EstimationInfo> info, boolean cancancel) {
                System.out.print(info.source.getName() + '\t');
                System.out.print(info.message + '\t');
                System.out.println(info.information.loglikelihood);
            }
        };
        getDocument().getElement().getProcessor().register(hook);

//        IProcessing<TsVariables, CompositeResults> proc = getDocument().getElement().getProcessor().generateProcessing(getDocument().getElement().getSpecification(), null);
//        CompositeResults rslts = proc.process(getDocument().getElement().getInput());
        return getDocument().getElement().getResults();//.get(DfmProcessingFactory.DFM, DfmResults.class);
//        System.out.println(dfm.getModel());
//        getDocument().getElement().getProcessor().unregister(hook);
    }

    private void editEstimationSpec() {
        DfmEstimationSpec newValue = getDocument().getElement().getSpecification().getEstimationSpec().clone();
        if (OpenIdePropertySheetBeanEditor.editSheet(DfmSheets.onDfmEstimationSpec(newValue), "Edit spec", null)) {
            getDocument().getElement().getSpecification().setEstimationSpec(newValue);
        }
    }
}
